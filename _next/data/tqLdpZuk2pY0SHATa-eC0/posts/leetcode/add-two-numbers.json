{"pageProps":{"leetcodeData":{"id":"add-two-numbers","contentHtml":"<h2>Description</h2>\n<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p>\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n<p>Example 1:</p>\n<pre><code>Input: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.\n</code></pre>\n<p>Example 2:</p>\n<pre><code>Input: l1 = [0], l2 = [0]\nOutput: [0]\n</code></pre>\n<p>Example 3:</p>\n<pre><code>Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]\n</code></pre>\n<p>Constraints:</p>\n<ul>\n<li>The number of nodes in each linked list is in the range [1, 100].</li>\n<li>0 &#x3C;= Node.val &#x3C;= 9</li>\n<li>It is guaranteed that the list represents a number that does not have leading zeros.</li>\n</ul>\n<h2>Solution</h2>\n<h3>Elementary Math</h3>\n<p>Intuition</p>\n<p>Keep track of the carry using a variable and simulate digits-by-digits sum starting from the head of list, which contains the least-significant digit.</p>\n<pre><code>l1 => 2 => 4 => 3 => null\n+ \nl2 => 5 => 6 => 4 => null\n=\nresult => 7 => 0 => 8(carry = 1) => null\n</code></pre>\n<p>Algorithm</p>\n<p>Just like how you would sum two numbers on a piece of paper, we begin by summing the least-significant digits, which is the head of l1 and l2. Since each digit is in the range of 0...9, summing two digits may \"overflow\". For example <code>5+7=12</code>. In this case, we set the current digit to 2 and bring over the carry=1 to the next iteration. carry must be either 0 or 1 because the largest possible sum of two digits (including the carry) is <code>9+9+1=19</code>.</p>\n<p>The pseudocode is as following:</p>\n<ul>\n<li>Initialize current node to dummy head of the returning list.</li>\n<li>Initialize carry to 0.</li>\n<li>Loop through lists l1 and l2 until you reach both ends and carry is 0.<ul>\n<li>Set x to node l1's value. If l1 has reached the end of l1, set to 0.</li>\n<li>Set y to node l2's value. If l2 has reached the end of l2, set to 0.</li>\n<li>Set sum=x+y+carry.</li>\n<li>Update carry=sum/10.</li>\n<li>Create a new node with the digit value of (sum mod 10) and set it to current node's next, then advance current node to next.</li>\n<li>Advance both l1 and l2.</li>\n</ul></li>\n<li>Return dummy head's next node.</li>\n</ul>\n<p>Note that we use a dummy head to simplify the code. Without a dummy head, you would have to write extra conditional statements to initialize the head's value.</p>\n<p>Take extra caution of the following cases:</p>\n<ul>\n<li>\n<p>When one list is longer than the other. <code>l1=[0,1] l2=[0,1,2]</code></p>\n</li>\n<li>\n<p>When one list is null, which means an empty list. <code>l1=[] l2=[0,1]</code></p>\n</li>\n<li>\n<p>The sum could have an extra carry of one at the end, which is easy to forget. <code>l1=[9,9] l2=[1]</code></p>\n</li>\n<li>\n<p>Time complexity: <code>O(max(m,n))</code>. Assume that <code>m</code> and <code>n</code> represents the length of <code>l1</code> and <code>l2</code> respectively, the algorithm above iterates at most <code>max⁡(m,n)</code> times.</p>\n</li>\n<li>\n<p>Space complexity: <code>O(max(m,n))</code>. The length of the new list is at most <code>max⁡(m,n) + 1</code>.</p>\n</li>\n</ul>\n<p>Implementation</p>\n<pre><code class=\"language-typescript\">function addTwoNumbers(l1: ListNode | null, l2: ListNode | null): ListNode | null {\n  let carry: number = 0\n  let dummy: ListNode = new ListNode(-1, null)\n  let head: ListNode = dummy\n  while (l1 != null || l2 != null || carry != 0) {\n      let x: number = l1 != null ? l1.val : 0\n      let y: number = l2 != null ? l2.val : 0\n      let sum = x + y + carry\n      carry = Math.floor(sum / 10)\n      head.next = new ListNode(sum % 10)\n      head = head.next\n      l1 ? l1 = l1.next : null\n      l2 ? l2 = l2.next : null\n  }\n  return dummy.next\n};\n</code></pre>\n<p>Follow up</p>\n<p>What if the the digits in the linked list are stored in non-reversed order? For example:</p>\n<p><code>(3 => 4 => 2) + (4 => 6 => 5) = 8 => 0 => 7</code></p>\n<p>and what about solving problem with recursion?</p>\n","title":"Add two numbers (Medium level)","date":"2023-03-05"}},"__N_SSG":true}