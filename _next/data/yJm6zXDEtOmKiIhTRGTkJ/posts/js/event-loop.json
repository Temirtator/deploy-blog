{"pageProps":{"jsData":{"id":"event-loop","contentHtml":"<!-- ## Introduction -->\n<p>    How JavaScript can be one threaded and asynchronous language? Long story short, JavaScript one-threaded, but asynchronous behaviour isn't part of language, instead of it, this process is based on browser and accessible through browser API. <br/>\nIn this article, I will not extend this topic widely enough and article is intended to provide a cursory understanding of the event loop and may be updated with more interesting examples in the future. I hope something in here will be helpful for you.</p>\n<!-- ## Motivation - Why we need to know this? -->\n<p>    Very important to understand the mechanisms of programming language to not make a lot of bugs in your projects. The one of the main aspects of creating high-quality application on JavaScript is understanding, what is event loop. Knowledge of this process, allows us to know, \"what is WebAPI?\", \"How call stack does work?\", \"Why we're meeting sometimes usage of <code>setTimeout</code> with delayTime of 0?\", \"What is message queue?\", also it prevents us from misundestanding of how does run this code.</p>\n<h2>Terms</h2>\n<p><code>Call Stack</code> - LIFO principle based mechanism to keep track of the function calls. </p>\n<p><code>Browser or Web API</code> - a set of API's which is integrated in browser, to allow control some complex operations and to help accessing data, like localStorage, cache, timers or geolocation and many others. </p>\n<p><code>Message Queue</code> - queue of messages to be processed, where each message is associated a function. When call stack is empty, a message is taken out of the queue and processed.</p>\n<!-- ## Description of process - How code is running in JavaScript? -->\n<p>Theory without any practice is useless. Let's analyze code below, how does it run?</p>\n<h4>Code example:</h4>\n<pre><code>function main() {\n  console.log('a);\n  setTimeout(function cb() {\n    console.log('b);\n  }, 0);\n  console.log('c');\n}\nmain();\n/* Output will be like \n* a\n* c\n* b\n*/\n</code></pre>\n<ol>\n<li>\n<p>first things first, main() will be included in the call stack, after that as the initial expression of function will be added  <code>console.log('a')</code>. This expression will be ran and in console will be displayed <code>a</code> letter as first action.</p>\n</li>\n<li>\n<p>second one is specific <code>setTimeout()</code> function with <code>cb()</code> callback function and with timeout of 0 second. <code>setTimeout()</code> uses browser API for handling of function call which declared as the cb() function in our sample code. This element will be removed from call stack right after browser API will receive timer function. </p>\n</li>\n<li>\n<p><code>console.log('c')</code> will be added to stack, while in browser running timer for cb() function call. In this particular instance, since timeout is 0 second, cb() will be placed in \"message queue\", right after browser will receive it.</p>\n</li>\n<li>\n<p>main() will removed from call stack, after last expression in function will be finished. To be placed in call stack of function which is in \"message queue\" of browser API, call stack must be empty. Even we know that the timeout of <code>setTimeout()</code> is equal to 0, cb() function will called in last time just after all stack calls will be finished.</p>\n</li>\n<li>\n<p>Now when we have an empty call stack, we know that we have uncalled cb() function from \"message queue\", which is will be placed in call stack and will ran. The letter <code>c</code> will display in console. This is <code>event loop</code> of JavaScript.</p>\n</li>\n</ol>\n<blockquote>\n<p>So, argument delayTime in the <code>setTimeout(function, delayTime)</code> doesn't mean exactly time of delay for running of callback function. It means, minimum execution time, which will be called in a some moment.</p>\n</blockquote>\n<p>Did you understand? Me too.\nNo problem. Let's look, next example more difficult, but not so much) Please relax, we will understand better.</p>\n<h4>Code example #2:</h4>\n<pre><code>function main() {\n  console.log('a')\n  setTimeout(function exec() {\n    console.log('b')\n  }, 0)\n  runWhileLoopForNSeconds(3)\n  console.log('c')\n}\nmain()\nfunction runWhileLoopForNSeconds(sec) {\n  let start = Date.now(),\n  now = start\n  while (now - start &#x3C; sec * 1000) {\n    now = Date.now()\n  }\n}\n// Output\n// A\n// C\n// B\n</code></pre>\n<br/>\n<img src=\"/images/eventloop.png\" style=\"width: 50%; margin: 0 auto;\">\n<ul>\n  <li>\n    The function <code>runWhileLoopForNSeconds()</code> does the same thing which is in the name. This function checks, whether seconds expired which is settled as an argument. The main thing, you need to understand, \"while loop\" is block expression, and that's means no usage of browser API and process is in call stack. Thereby it blocks all next expressions, while won't finish.\n  </li>\n  <li>\n    In the above code, although <code>setTimeout()</code> have delay of 0 second and \"while loop\" running for 3 minutes, function <code>exec()</code> will get stuck in \"message queue\". In the call stack \"while loop\" will be ran for 3 seconds, and just after when it will be empty <code>exec()</code> function will be placed in the stack and will run.\n  </li>\n  <li>\n    In this way, <code>delay</code> argument in the <code>setTimeout()</code> does not guarantee running of the callback function after settled time.  \n  </li>\n</ul>\n<h2>Body 4 - Bug cases - Some popular errors in JavaScript related with event loop</h2>\n<pre><code></code></pre>\n<!-- ## Conclusion  -->\n<p>    We see that in modern world, cognition of process of the event loop in JavaScript \"must have\" knowledge. You can make a lot of mistakes, writing your application while you don't know these principles. Every frontend or backend developer must ask a question from himself/herself, how does it work? everytime.</p>\n","title":"How does event loop works? V1","date":"2020-12-27"}},"__N_SSG":true}